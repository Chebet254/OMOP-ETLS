install.packages("remotes")
install.packages("remotes")
if(!require(DatabaseConnector)){
install.packages("DatabaseConnector")
library(DatabaseConnector)
}
library(remotes)
#set JDBC drivers
Sys.setenv("DATABASECONNECTOR_JAR_FOLDER" = "c:/temp/jdbcDrivers")
downloadJdbcDrivers("postgresql")
#create connection
connectiondetails <- DatabaseConnector::createConnectionDetails(
dbms = "postgresql",
server = "localhost/POSTGRESQL 14",
user = "postgres",
password = "",
port = 5432
)
install.packages("devtools")
devtools::install_github("OHDSI/CommonDataModel")
#List the currently supported SQL dialects
CommonDataModel::listSupportedDialects()
#List the currently supported SQL dialects
CommonDataModel::listSupportedDialects()
#List the currently supported CDM versions
CommonDataModel::listSupportedVersions()
setwd("D:/APHRC/LHS/OMOP ETL/OMOP-ETLS github")
#This function will generate the text files in the dialect you choose, putting the output files in the folder you specify.
CommonDataModel::buildRelease(cdmVersions = "5.4",
targetDialects = "postgresql",
outputfolder = "/Output")
#If you have an empty schema ready to go, the package will connect and instantiate the tables for you.
#To start, you need to download DatabaseConnector in order to connect to your database.
devtools::install_github("DatabaseConnector")
#If you have an empty schema ready to go, the package will connect and instantiate the tables for you.
#To start, you need to download DatabaseConnector in order to connect to your database.
devtools::install_github("DatabaseConnector")
#If you have an empty schema ready to go, the package will connect and instantiate the tables for you.
#To start, you need to download DatabaseConnector in order to connect to your database.
install.packages("DatabaseConnector")
install.packages("DatabaseConnector")
cd <- DatabaseConnector::createConnectionDetails(dbms = "postgresql",
server = "localhost/ohdsi",
user = "postgres",
password = "postgres",
pathToDriver = "/pathToDriver"
)
#set JDBC drivers
Sys.setenv("DATABASECONNECTOR_JAR_FOLDER" = "c:/temp/jdbcDrivers")
downloadJdbcDrivers("postgresql")
remotes::install_github("OHDSI/Achilles")
library(remotes)
#set JDBC drivers
Sys.setenv("DATABASECONNECTOR_JAR_FOLDER" = "c:/temp/jdbcDrivers")
downloadJdbcDrivers("postgresql")
#create connection
connectiondetails <- DatabaseConnector::createConnectionDetails(
dbms = "postgresql",
server = "localhost/POSTGRESQL 14",
user = "postgres",
password = "",
port = 5432
)
outputFolder <- "D:/APHRC/LHS project/OMOP ETL/output"
Achilles::validateSchema(connectionDetails = connectiondetails,
cdmDatabaseSchema = "cdm",
resultsDatabaseSchema = "cdm",
cdmVersion = 5.4,
runCostAnalysis = FALSE,
outputFolder = outputFolder,
sqlOnly = FALSE)
cd <- DatabaseConnector::createConnectionDetails(dbms = "postgresql",
server = "localhost/ohdsi",
user = "postgres",
password = "postgres",
pathToDriver = "/pathToDriver"
)
cd <- DatabaseConnector::createConnectionDetails(dbms = "postgresql",
server = "localhost/ohdsi",
user = "postgres",
password = "postgres",
pathToDriver = "c:/temp/jdbcDrivers"
)
?jdbcDrivers`
?jdbcDrivers
?jdbcDrivers
downloadJdbcDrivers("postgresql")
#set JDBC drivers
Sys.setenv("DATABASECONNECTOR_JAR_FOLDER" = "c:/temp/jdbcDrivers")
downloadJdbcDrivers("postgresql")
#install.packages("remotes")
if(!require(DatabaseConnector)){
install.packages("DatabaseConnector")
library(DatabaseConnector)
}
library(remotes)
#set JDBC drivers
Sys.setenv("DATABASECONNECTOR_JAR_FOLDER" = "c:/temp/jdbcDrivers")
downloadJdbcDrivers("postgresql")
downloadJdbcDrivers("postgresql")
cd <- DatabaseConnector::createConnectionDetails(dbms = "postgresql",
server = "localhost/ohdsi",
user = "postgres",
password = "postgres",
pathToDriver = "c:/temp/jdbcDrivers"
)
cd
CommonDataModel::executeDdl(connectionDetails = cd,
cdmVersion = "5.4",
cdmDatabaseSchema = "ohdsi_demo"
)
#create connection
connectiondetails <- DatabaseConnector::createConnectionDetails(
dbms = "postgresql",
server = "localhost/POSTGRESQL 14",
user = "postgres",
password = "",
port = 5432
)
cd <- DatabaseConnector::createConnectionDetails(dbms = "postgresql",
server = "localhost/POSTGRESQL 14",
user = "postgres",
password = "postgres",
pathToDriver = "c:/temp/jdbcDrivers"
)
CommonDataModel::executeDdl(connectionDetails = cd,
cdmVersion = "5.4",
cdmDatabaseSchema = "ohdsi_demo"
)
cd <- DatabaseConnector::createConnectionDetails(dbms = "postgresql",
server = "localhost/POSTGRESQL 15",
user = "postgres",
password = "postgres",
pathToDriver = "c:/temp/jdbcDrivers"
)
CommonDataModel::executeDdl(connectionDetails = cd,
cdmVersion = "5.4",
cdmDatabaseSchema = "ohdsi_demo"
)
cd <- DatabaseConnector::createConnectionDetails(dbms = "postgresql",
server = "localhost/CDM",
user = "postgres",
password = "postgres",
pathToDriver = "c:/temp/jdbcDrivers"
)
CommonDataModel::executeDdl(connectionDetails = cd,
cdmVersion = "5.4",
cdmDatabaseSchema = "ohdsi_demo"
)
CommonDataModel::executeDdl(connectionDetails = cd,
cdmVersion = "5.4",
cdmDatabaseSchema = "cdmDatabaseSchema"
)
cd <- DatabaseConnector::createConnectionDetails(dbms = "postgresql",
server = "localhost/CDM",   #DATABASE NAME
user = "postgres",
password = "",
pathToDriver = "c:/temp/jdbcDrivers"
)
CommonDataModel::executeDdl(connectionDetails = cd,
cdmVersion = "5.4",
cdmDatabaseSchema = "cdmDatabaseSchema"
)
CommonDataModel::executeDdl(connectionDetails = cd,
cdmVersion = "5.4",
cdmDatabaseSchema = "cdmDatabaseSchema"
)
CommonDataModel::executeDdl(connectionDetails = cd,
cdmVersion = "5.4",
cdmDatabaseSchema = "cdm"
)
CommonDataModel::executeDdl(connectionDetails = cd,
cdmVersion = "5.4",
cdmDatabaseSchema = "DatabaseSchema"
)
CommonDataModel::executeDdl(connectionDetails = cd,
cdmVersion = "5.4",
cdmDatabaseSchema = "DatabaseSchema"
)
CommonDataModel::executeDdl(connectionDetails = cd,
cdmVersion = "5.4",
cdmDatabaseSchema = "DatabaseSchema"
)
CommonDataModel::executeDdl(connectionDetails = cd,
cdmVersion = "5.4",
cdmDatabaseSchema = "cdm"
)
cd <- DatabaseConnector::createConnectionDetails(dbms = "postgresql",
server = "localhost/postgres",   #DATABASE NAME
user = "postgres",
password = "",
pathToDriver = "c:/temp/jdbcDrivers"
)
CommonDataModel::executeDdl(connectionDetails = cd,
cdmVersion = "5.4",
cdmDatabaseSchema = "public"
)
CommonDataModel::executeDdl(connectionDetails = cd,
cdmVersion = "5.4",
cdmDatabaseSchema = "cdmDatabaseSchema"
)
#create connection
connectiondetails <- DatabaseConnector::createConnectionDetails(
dbms = "postgresql",
server = "localhost/POSTGRESQL 14",
user = "postgres",
password = "",
port = 5432
)
outputFolder <- "D:/APHRC/LHS project/OMOP ETL/output"
Achilles::validateSchema(connectionDetails = connectiondetails,
cdmDatabaseSchema = "cdm",
resultsDatabaseSchema = "cdm",
cdmVersion = 5.4,
runCostAnalysis = FALSE,
outputFolder = outputFolder,
sqlOnly = FALSE)
Achilles::achilles(connectionDetails = connectiondetails,
cdmDatabaseSchema = "cdm",
resultsDatabaseSchema = "achilles_results",
sourceName = "cdm",
createTable = TRUE,
smallCellCount = 5,
cdmVersion = 5.4,
numThreads = 1,
outputFolder = outputFolder
)
#create connection
connectiondetails <- DatabaseConnector::createConnectionDetails(
dbms = "postgresql",
server = "localhost/postgres",
user = "postgres",
password = "",
port = 5432
)
Achilles::achilles(connectionDetails = connectiondetails,
cdmDatabaseSchema = "cdm",
resultsDatabaseSchema = "achilles_results",
sourceName = "cdm",
createTable = TRUE,
smallCellCount = 5,
cdmVersion = 5.4,
numThreads = 1,
outputFolder = outputFolder
)
Achilles::exportToJson(connectionDetails = connectiondetails,
cdmDatabaseSchema = "public",
resultsDatabaseSchema = "achillesResults",
outputPath = "D:/APHRC/LHS project/OMOP ETL/output/cdm",
vocabDatabaseSchema = "cdm",
compressIntoOneFile = FALSE)
Achilles::achilles(connectionDetails = connectiondetails,
cdmDatabaseSchema = "public",
resultsDatabaseSchema = "achillesResults",
sourceName = "cdm",
createTable = TRUE,
smallCellCount = 5,
cdmVersion = 5.4,
numThreads = 1,
outputFolder = outputFolder
)
#create connection
connectiondetails <- DatabaseConnector::createConnectionDetails(
dbms = "postgresql",
server = "localhost/postgres",
user = "postgres",
password = "",
port = 5432
)
outputFolder <- "D:/APHRC/LHS project/OMOP ETL/output"
Achilles::validateSchema(connectionDetails = connectiondetails,
cdmDatabaseSchema = "cdm",
resultsDatabaseSchema = "cdm",
cdmVersion = 5.4,
runCostAnalysis = FALSE,
outputFolder = outputFolder,
sqlOnly = FALSE)
Achilles::achilles(connectionDetails = connectiondetails,
cdmDatabaseSchema = "public",
resultsDatabaseSchema = "achillesResults",
sourceName = "cdm",
createTable = TRUE,
smallCellCount = 5,
cdmVersion = 5.4,
numThreads = 1,
outputFolder = outputFolder
)
Achilles::achilles(connectionDetails = connectiondetails,
cdmDatabaseSchema = "public",
resultsDatabaseSchema = "achillesResults",
sourceName = "cdm",
createTable = TRUE,
smallCellCount = 5,
cdmVersion = 5.4,
numThreads = 1,
outputFolder = outputFolder
)
cd <- DatabaseConnector::createConnectionDetails(dbms = "postgresql",
server = "localhost/postgres",   #DATABASE NAME
user = "postgres",
password = "",
pathToDriver = "c:/temp/jdbcDrivers"
)
CommonDataModel::executeDdl(connectionDetails = cd,
cdmVersion = "5.4",
cdmDatabaseSchema = "public"
)
#create connection
connectiondetails <- DatabaseConnector::createConnectionDetails(
dbms = "postgresql",
server = "localhost/postgres",
user = "postgres",
password = "",
port = 5432
)
Achilles::achilles(connectionDetails = connectiondetails,
cdmDatabaseSchema = "public",
resultsDatabaseSchema = "achillesResults",
sourceName = "cdm",
createTable = TRUE,
smallCellCount = 5,
cdmVersion = 5.4,
numThreads = 1,
outputFolder = outputFolder
)
Achilles::achilles(connectionDetails = connectiondetails,
cdmDatabaseSchema = "public",
resultsDatabaseSchema = "achillesResults",
sourceName = "cdm",
createTable = TRUE,
smallCellCount = 5,
cdmVersion = 5.4,
numThreads = 1,
outputFolder = outputFolder
)
Achilles::achilles(connectionDetails = connectiondetails,
cdmDatabaseSchema = "public",
resultsDatabaseSchema = "achillesResults",
sourceName = "cdm",
createTable = TRUE,
smallCellCount = 5,
cdmVersion = 5.4,
numThreads = 1,
outputFolder = outputFolder
)
Achilles::achilles(connectionDetails = connectiondetails,
cdmDatabaseSchema = "public",
resultsDatabaseSchema = "achillesresults",
sourceName = "cdm",
createTable = TRUE,
smallCellCount = 5,
cdmVersion = 5.4,
numThreads = 1,
outputFolder = outputFolder
)
Achilles::exportToJson(connectionDetails = connectiondetails,
cdmDatabaseSchema = "public",
resultsDatabaseSchema = "achillesResults",
outputPath = "D:/APHRC/LHS project/OMOP ETL/output/cdm",
vocabDatabaseSchema = "cdm",
compressIntoOneFile = FALSE)
outputFolder <- "D:/APHRC/LHS project/OMOP ETL/output"
Achilles::exportToJson(connectionDetails = connectiondetails,
cdmDatabaseSchema = "public",
resultsDatabaseSchema = "achillesResults",
outputPath = outputFolder,
vocabDatabaseSchema = "cdm",
compressIntoOneFile = FALSE)
Achilles::exportToJson(connectionDetails = connectiondetails,
cdmDatabaseSchema = "public",
resultsDatabaseSchema = "achillesresults",
outputPath = outputFolder,
vocabDatabaseSchema = "cdm",
compressIntoOneFile = FALSE)
CreateCDMIndexAndConstraintScripts(
connectionDetails,
cdmSchema,
cdmVersion,
githubTag = NULL
)
setwd("D:/APHRC/LHS/OMOP ETL/OMOP-ETLS github")
#This function will generate the text files in the dialect you choose, putting the output files in the folder you specify.
CommonDataModel::buildRelease(cdmVersions = "5.4",
targetDialects = "postgresql",
outputfolder = "/Output")  #setwd
#This function will generate the text files in the dialect you choose, putting the output files in the folder you specify.
CommonDataModel::buildRelease(cdmVersions = "5.4",
targetDialects = "postgresql",
outputfolder = "OMOP-ETLS github/Output")  #setwd
#This function will generate the text files in the dialect you choose, putting the output files in the folder you specify.
CommonDataModel::buildRelease(cdmVersions = "5.4",
targetDialects = "postgresql",
outputfolder = "/Output")  #setwd
devtools::install_github("OHDSI/ETL-Synthea")
library(ETLSyntheaBuilder)
cd <- DatabaseConnector::createConnectionDetails(
dbms     = "postgresql",
server   = "localhost/synthea10",
user     = "postgres",
password = "lollipop",
port     = 5432,
pathToDriver = "d:/drivers"
)
cd <- DatabaseConnector::createConnectionDetails(
dbms     = "postgresql",
server   = "localhost/synthea10",
user     = "postgres",
password = "lollipop",
port     = 5432,
pathToDriver = "/drivers"
)
cd <- DatabaseConnector::createConnectionDetails(
dbms     = "postgresql",
server   = "localhost/synthea10",
user     = "postgres",
password = "lollipop",
port     = 5432,
pathToDriver = "c:/temp/jdbcDrivers"
)
cdmSchema      <- "cdm_synthea10"
cdmVersion     <- "5.4"
syntheaVersion <- "2.7.0"
syntheaSchema  <- "native"
syntheaFileLoc <- "/tmp/synthea/output/csv"
vocabFileLoc   <- "/tmp/Vocabulary_20181119"
ETLSyntheaBuilder::CreateCDMTables(connectionDetails = cd, cdmSchema = cdmSchema, cdmVersion = cdmVersion)
cd <- DatabaseConnector::createConnectionDetails(
dbms     = "postgresql",
server   = "localhost/synthea10",
user     = "postgres",
password = "lollipop",
port     = 5432,
pathToDriver = "c:/temp/jdbcDrivers"
)
cdmSchema      <- "cdm_synthea10"
cdmVersion     <- "5.4"
syntheaVersion <- "2.7.0"
syntheaSchema  <- "native"
syntheaFileLoc <- "/tmp/synthea/output/csv"
vocabFileLoc   <- "/tmp/Vocabulary_20181119"
ETLSyntheaBuilder::CreateCDMTables(connectionDetails = cd, cdmSchema = cdmSchema, cdmVersion = cdmVersion)
cd <- DatabaseConnector::createConnectionDetails(
dbms     = "postgresql",
server   = "localhost/synthea10",
user     = "postgres",
password = "lollipop",
port     = 5432,
pathToDriver = "c:/temp/jdbcDrivers"
)
ETLSyntheaBuilder::CreateCDMTables(connectionDetails = cd, cdmSchema = cdmSchema, cdmVersion = cdmVersion)
ETLSyntheaBuilder::CreateSyntheaTables(connectionDetails = cd, syntheaSchema = syntheaSchema, syntheaVersion = syntheaVersion)
ETLSyntheaBuilder::CreateSyntheaTables(connectionDetails = cd, syntheaSchema = syntheaSchema, syntheaVersion = syntheaVersion)
ETLSyntheaBuilder::LoadSyntheaTables(connectionDetails = cd, syntheaSchema = syntheaSchema, syntheaFileLoc = syntheaFileLoc)
ETLSyntheaBuilder::LoadVocabFromCsv(connectionDetails = cd, cdmSchema = cdmSchema, vocabFileLoc = vocabFileLoc)
ETLSyntheaBuilder::LoadEventTables(connectionDetails = cd, cdmSchema = cdmSchema, syntheaSchema = syntheaSchema, cdmVersion = cdmVersion, syntheaVersion = syntheaVersion)
syntheaFileLoc <- "D:/APHRC/LHS/OMOP ETL/KISESA DATASETS-20230324T073138Z-001/KISESA DATASETS/Residency.csv"
ETLSyntheaBuilder::LoadSyntheaTables(connectionDetails = cd, syntheaSchema = syntheaSchema, syntheaFileLoc = syntheaFileLoc)
ETLSyntheaBuilder::LoadEventTables(connectionDetails = cd, cdmSchema = cdmSchema, syntheaSchema = syntheaSchema, cdmVersion = cdmVersion, syntheaVersion = syntheaVersion)
ETLSyntheaBuilder::LoadSyntheaTables(connectionDetails = cd, syntheaSchema = syntheaSchema, syntheaFileLoc = syntheaFileLoc)
syntheaFileLoc <- "D:/APHRC/LHS/OMOP ETL/KISESA DATASETS-20230324T073138Z-001/KISESA DATASETS/Residency.csv"
vocabFileLoc   <- "/tmp/Vocabulary_20181119"
ETLSyntheaBuilder::CreateCDMTables(connectionDetails = cd, cdmSchema = cdmSchema, cdmVersion = cdmVersion)
ETLSyntheaBuilder::CreateSyntheaTables(connectionDetails = cd, syntheaSchema = syntheaSchema, syntheaVersion = syntheaVersion)
ETLSyntheaBuilder::LoadSyntheaTables(connectionDetails = cd, syntheaSchema = syntheaSchema, syntheaFileLoc = syntheaFileLoc)
ETLSyntheaBuilder::LoadVocabFromCsv(connectionDetails = cd, cdmSchema = cdmSchema, vocabFileLoc = vocabFileLoc)
ETLSyntheaBuilder::LoadEventTables(connectionDetails = cd, cdmSchema = cdmSchema, syntheaSchema = syntheaSchema, cdmVersion = cdmVersion, syntheaVersion = syntheaVersion)
Achilles::exportToJson(connectionDetails = connectiondetails,
cdmDatabaseSchema = "public",
resultsDatabaseSchema = "achillesresults",
outputPath = outputFolder,
vocabDatabaseSchema = "cdm",
compressIntoOneFile = FALSE)
Achilles::achilles(connectionDetails = connectiondetails,
cdmDatabaseSchema = "public",
resultsDatabaseSchema = "achillesresults",  #no capital letters- brings issues with postgres
sourceName = "cdm",
createTable = TRUE,
smallCellCount = 5,
cdmVersion = 5.4,
numThreads = 1,
outputFolder = outputFolder
)
Achilles::achilles(connectionDetails = connectiondetails,
cdmDatabaseSchema = "public",
resultsDatabaseSchema = "achillesresults",  #no capital letters- brings issues with postgres
sourceName = "cdm",
createTable = TRUE,
smallCellCount = 5,
cdmVersion = 5.4,
numThreads = 1,
outputFolder = outputFolder)
